CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //Set A register
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Ain);
    Not(in=instruction[15],out=ainstr);
    Or(a=instruction[5],b=ainstr,out=loadA);
    ARegister(in=Ain,load=loadA,out=Aout,out[0..14]=addressM);
    
    //Set D register
    And(a=instruction[15],b=instruction[4],out=loadD);
    DRegister(in=ALUout,load=loadD,out=Dout);
    
    //Set writeM
    And(a=instruction[15],b=instruction[3],out=writeM);
    
    //Get ALU output
    Mux16(a=Aout,b=inM,sel=instruction[12],out=AMin);
    ALU(x=Dout,y=AMin,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],
    	f=instruction[7],no=instruction[6],out=ALUout,out=outM,zr=zero,ng=neg);
    
    And(a=instruction[15],b=instruction[2],out=j1);
    And(a=instruction[15],b=instruction[1],out=j2);
    And(a=instruction[15],b=instruction[0],out=j3);
    
    //Calculate whether to jump or not
    DMux8Way(in=true,sel[2]=j1,sel[1]=j2,sel[0]=j3,a=nj,b=gt,c=eq,d=ge,e=lt,f=ne,g=le,h=jmp);

	Not(in=nj,out=nnj);
    Not(in=neg,out=nneg);
    Not(in=zero,out=nzero);
    And(a=nzero,b=nneg,out=nzn);
    Or(a=zero,b=neg,out=zn);
    
    And(a=gt,b=nzn,out=jt1);
    And(a=eq,b=zero,out=jt2);
    And(a=ge,b=nneg,out=jt3);
    And(a=lt,b=neg,out=jt4);
    And(a=ne,b=nzero,out=jt5);
    And(a=le,b=zn,out=jt6);
    
    Or8Way(in[0]=jt1,in[1]=jt2,in[2]=jt3,in[3]=jt4,in[4]=jt5,in[5]=jt6,in[6]=jmp,in[7]=false,out=jt0);
    And(a=jt0,b=nnj,out=jumpload);
 
	//Set PC register    
    PC(in=Aout,load=jumpload,inc=true,reset=reset,out[0..14]=pc);
    
}
